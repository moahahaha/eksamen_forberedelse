import {
  __commonJS
} from "./chunk-P2LSHJDD.js";

// browser-external:util
var require_util = __commonJS({
  "browser-external:util"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "util" has been externalized for browser compatibility. Cannot access "util.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../../../node_modules/document/lib/lang.js
var require_lang = __commonJS({
  "../../../node_modules/document/lib/lang.js"(exports) {
    exports.template = function(template, params) {
      if (!params) {
        params = {};
      }
      return ("" + template).replace(/\\?\{([^{}]+)\}/g, function(match, name) {
        return match.charAt(0) === "\\" ? match.slice(1) : (
          // '{a}' -> '1'
          params[name] != null ? params[name] : ""
        );
      });
    };
    exports.makeArray = function(subject) {
      if (Array.isArray(subject)) {
        return subject;
      } else if (subject === void 0 || subject === null) {
        return [];
      } else {
        return [subject];
      }
    };
    exports.isEmptyObject = function(obj) {
      var key;
      for (key in obj) {
        return false;
      }
      return true;
    };
    exports.each = function(obj, callback) {
      var key;
      if (obj) {
        for (key in obj) {
          callback(obj[key], key);
        }
      }
    };
    exports.mix = function(r, s, or, cl) {
      if (!s || !r) {
        return r;
      }
      var i = 0, c, len;
      or = or || or === void 0;
      if (cl && (len = cl.length)) {
        for (; i < len; i++) {
          c = cl[i];
          if (c in s && (or || !(c in r))) {
            r[c] = s[c];
          }
        }
      } else {
        for (c in s) {
          if (or || !(c in r)) {
            r[c] = s[c];
          }
        }
      }
      return r;
    };
    exports.object_member_by_namespaces = function(obj, namespaces, default_value) {
      var splitted = namespaces.split(".");
      var value = obj;
      splitted.some(function(ns) {
        if (ns in value) {
          value = value[ns];
        } else {
          value = null;
          return true;
        }
      });
      return value || default_value;
    };
    exports.log = function(subject) {
      process.stdout.write(
        require_util().inspect(subject, {
          depth: 10
        })
      );
      process.stdout.write("\n");
    };
    exports.capitalize = function(string) {
      return string.substr(0, 1).toUpperCase() + string.substr(1);
    };
  }
});
export default require_lang();
//# sourceMappingURL=document_lib_lang.js.map
